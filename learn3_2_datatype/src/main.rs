fn main() {
    // Rust是静态类型语言，所有变量都有确切的类型，编译器通常可以推导类型，但是当我们使用parse
    // 将String转换成数值类型时，我们必须加上一个类型标注。
    let guess:i32 = "32".parse().expect("Not a number");
    
    //标量类型 int, float, bool, char
    let i: i32 = 1;
    let arch: isize = 111;
    let f: f32 = 1.1;
    let b: bool = true;
    let c: char = 'a';

    // 复合类型 元组（tuple）, 数组（array）
    // 元组是将多种类型的多个值组合到一个复合类型中的一种基本方式，
    // 元组的长度是固定的：声明后，他们就无法增长或缩小
    let tup: (i32, f64, u8) = (500, 6.4, 1);
    // 变量tup绑定到整个元组，我们可以使用模式匹配来结构元组的一个值
    let (x, y, z) = tup;
    // 除模式匹配外还可以使用.访问元组的值的索引
    let item1 = tup.0;
    let item2 = tup.1;
    // 没有任何值的元组（）是一种特殊的类型，只有一个值，也写成（），该类型称单元类型，该值称单元值
    let my_tuple: (i32, ()) = (42, ());

    // 多个同类型值组合在一起就是数组，Rust数组具有固定长度
    let a: [i32; 5] = [1, 2, 3, 4, 5];
    // 数组通过索引访问
    let first = a[0];
    // 当你希望数据分配到栈而不是堆上时就选择数组。
    // let a = [3; 5];  let a = [3, 3, 3, 3, 3]; 这两种效果相同
}
